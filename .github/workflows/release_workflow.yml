name: release

on:
  push:
    tags:
      - '*'

  workflow_dispatch:

jobs:
  Get-openssl-static-3xx-version:
    runs-on: windows-2022
    outputs:
      openssl_3xx_ver: ${{ steps.Read-OpenSSL-3xx-version.outputs.openssl_3xx_ver }}
      pkg_3xx_name: ${{ steps.Read-OpenSSL-3xx-version.outputs.pkg_3xx_name }}
    steps:
      - uses: actions/checkout@v3
      - id: Read-OpenSSL-3xx-version
        name: Read OpenSSL 3xx version from file
        shell: pwsh
        run: |
            $openssl_3xx_ver=$(Get-Content openssl_3xx_versions.yml | Select-String -Pattern "openssl_ver_3xx" | ForEach-Object { $_.ToString().Split(":")[1].Trim() })
            Write-Output "openssl_3xx_ver=${openssl_3xx_ver}" >> $env:GITHUB_OUTPUT
            Write-Output "pkg_3xx_name=openssl-openssl-${openssl_3xx_ver}" >> $env:GITHUB_OUTPUT


  Get-openssl-static-1xx-version:
    runs-on: windows-2022
    outputs:
      openssl_1xx_ver: ${{ steps.Read-OpenSSL-1xx-version.outputs.openssl_1xx_ver }}
      pkg_1xx_name: ${{ steps.Read-OpenSSL-1xx-version.outputs.pkg_1xx_name }}
    steps:
      - uses: actions/checkout@v3
      - id: Read-OpenSSL-1xx-version
        name: Read OpenSSL 1xx version from file
        shell: pwsh
        run: |
            $openssl_1xx_ver=$(Get-Content openssl_1xx_versions.yml | Select-String -Pattern "openssl_ver_1xx" | ForEach-Object { $_.ToString().Split(":")[1].Trim() })
            Write-Output "openssl_1xx_ver=${openssl_1xx_ver}" >> $env:GITHUB_OUTPUT
            Write-Output "pkg_1xx_name=openssl-OpenSSL_${openssl_1xx_ver}" >> $env:GITHUB_OUTPUT

  Build-and-upload-openssl-static-1xx:
    needs: Get-openssl-static-1xx-version
    uses: ./.github/workflows/openssl-static_base_workflow.yml
    with:
      openssl_ver: ${{ needs.Get-openssl-static-1xx-version.outputs.openssl_1xx_ver }}
      openssl_pkg_name: ${{ needs.Get-openssl-static-1xx-version.outputs.pkg_1xx_name }}
      openssl_source_url: https://github.com/openssl/openssl/archive/refs/tags/OpenSSL_${{ needs.Get-openssl-static-1xx-version.outputs.openssl_1xx_ver }}.zip

  Build-and-upload-openssl-static-3xx:
    needs: Get-openssl-static-3xx-version
    uses: ./.github/workflows/openssl-static_base_workflow.yml
    with:
      openssl_ver: ${{ needs.Get-openssl-static-3xx-version.outputs.openssl_3xx_ver }}
      openssl_pkg_name: ${{ needs.Get-openssl-static-3xx-version.outputs.pkg_3xx_name }}
      openssl_source_url: https://github.com/openssl/openssl/archive/refs/tags/openssl-${{ needs.Get-openssl-static-3xx-version.outputs.openssl_3xx_ver }}.zip

  create-release:
    runs-on: ubuntu-latest
    needs: [Get-openssl-static-1xx-version,Get-openssl-static-3xx-version,Build-and-upload-openssl-static-1xx,Build-and-upload-openssl-static-3xx]
    steps:
      # Poll the GitHub Actions Artifacts API to wait for both artifacts to be available
      # before downloading. This avoids transient 404 errors that can occur when artifacts
      # are uploaded but not yet propagated through GitHub's artifact listing API.
      - name: Wait for and download artifacts
        env:
          ART1: openssl-static-${{ needs.Get-openssl-static-1xx-version.outputs.openssl_1xx_ver }}
          ART2: openssl-static-${{ needs.Get-openssl-static-3xx-version.outputs.openssl_3xx_ver }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          owner_repo="${{ github.repository }}"
          runid="${{ github.run_id }}"

          download_artifact() {
            local name="$1"
            local max_attempts=60
            local attempt=1
            echo "Looking for artifact '$name' for run $runid (repo $owner_repo)"
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt/$max_attempts..."
              resp=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/${owner_repo}/actions/runs/${runid}/artifacts")
              artifact_id=$(echo "$resp" | jq -r --arg NAME "$name" '.artifacts[] | select(.name==$NAME) | .id' | head -n1 || true)
              if [ -n "$artifact_id" ]; then
                echo "Found artifact '$name' id=$artifact_id"
                echo "Downloading artifact ZIP..."
                curl -s -L -H "Authorization: token $GITHUB_TOKEN" \
                  "https://api.github.com/repos/${owner_repo}/actions/artifacts/${artifact_id}/zip" -o "${name}.zip"
                echo "Unzipping ${name}.zip"
                unzip -o "${name}.zip" -d .
                return 0
              fi
              attempt=$((attempt+1))
              sleep 5
            done
            echo "Artifact '$name' not found after $max_attempts attempts" >&2
            return 1
          }

          download_artifact "$ART1"
          download_artifact "$ART2"

      - name: Release
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 #v0.1.15
        with:
          files: |
            ./openssl-OpenSSL_${{ needs.Get-openssl-static-1xx-version.outputs.openssl_1xx_ver }}.exe
            ./openssl-openssl-${{ needs.Get-openssl-static-3xx-version.outputs.openssl_3xx_ver }}.exe
